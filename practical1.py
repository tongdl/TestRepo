# -*- coding: utf-8 -*-
"""Practical1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ATYnuQVdJihRmDhcSKS4DLkjkIDBPN53

**UCCC3073 Data Science**

## **Practical 1: Introdction to R, Python and Colab**

R and Python programming languages have been extensively used in data science project to process, visualize and analyze data.

R is a software language for carrying out complicated statistical analyses. It includes routines for data summary and exploration, graphical presentation and data modelling.

Python is the high-level lanaguage for carrying out data mining analyses. Unlike R, Python is designed for analyzing general problems.

Google Colab is the cloud-based IDE designed for Python syntax. Now, it can support R too. It works like Jupyter Notebook where users can integrate source code with the text-based command in a file.

In this session, you will learn basic programming syntax in R and Python using Google Colab.

### **1. Execute R and Python syntax**
There are 2 ways to run R in Google Colab.

1. The first way is to start the Colab notebook in the R runtime. This method only can run R syntax.

2. The second way is to use the `rpy2` package in the Python runtime. Unlike the first method, this method allows you to execute R and Python codes together.


#### **1.1 Start Colab notebook in the R runtime**
There are 2 ways to start notebook in the R runtime.

* Click on the **Runtime** menu, and select **Change rntime type**. You would see a dialog below. Select **R** to use the R runtime.<img src='https://drive.google.com/uc?id=1A-k6UUXfXrMN4mG5YXXM40-7WcgyPl3p'>

*   Copy and paste the following Colab link in a new browser: <br>https://colab.to/r. <br> At first glance, there is no difference between notebooks with Python and R runtimes. But, if you open the **Runtime** setting, and select **Change runtime type**, you would see a dialog confirming that you are now in the R runtime.

#### **1.2 Run R and Python on the same Notebook**

* Open a new Colab notebook. By default, the notebook will use the Python runtime.

* Downgrade `rpy2` package to version 3.5 using `pip install`
"""

!pip install rpy2==3.5.1

"""* Activate/Load the rpy2 package"""

# Commented out IPython magic to ensure Python compatibility.
#activate R magic
# %load_ext rpy2.ipython

"""Now, you can type R syntax in this notebook.

There are two magic cells for executing R codes in Python notebook.

*1. Cell Magic -- `%%R`*

> This is used to run the entire cell in R language.
>```
%%R
...
...
```

*2. Line magic -- `%R`*

> This is used to run a singular line of R code
>```
%R ...
```

Now, try it out yourself.
"""

#Python
print("Welcome to data science course")

# Commented out IPython magic to ensure Python compatibility.
# #R - use cell magic
# %%R
# "Welcome to data science course"

# Commented out IPython magic to ensure Python compatibility.
#R - use line magic
# %R "Welcome to data science course"

#check python version in Colab
!python --version

# Commented out IPython magic to ensure Python compatibility.
#check R version in Colab
# %R R.version.string

"""### **2. Arithmetic operators**

We can evaluate expressions using Python or R.
"""

#Python
1 + 1 #addition operation

# Commented out IPython magic to ensure Python compatibility.
#R
# %R 1 + 1 #addition operation

# Commented out IPython magic to ensure Python compatibility.
#multiplication operation
##Python
print(2 * 3)

# %R 2 * 3

# Commented out IPython magic to ensure Python compatibility.
#division operation
##Python
print(11 / 3)  #normal division
print(11 // 3) #integer division

##R
# %R 11 / 3

# Commented out IPython magic to ensure Python compatibility.
#modulus operation
##Python
print(11 % 3)

##R
# %R 11 %% 3

# Commented out IPython magic to ensure Python compatibility.
#exponent operation
##Python
print(2 ** 3)

##R
# %R 2 ^ 3

"""#### **3. Boolean operators**

Boolean operators also exist in Python and R to manipulate the primitive True and False values.
"""

#Python
print(1 == 0)             #equality operation
print(not(1 == 0))        #NOT operation
print((2==2) and (2==3))  #AND operation
print((2==2) or (2==3))   #OR operation

# Commented out IPython magic to ensure Python compatibility.
# #R
# %%R
# print(1 == 0)             #equality operation
# print(1 != 0)             #NOT operation
# print((2==2) & (2==3))    #AND operation
# (2==2) | (2==3)           #OR operation

"""#### **4. Variables**

Variable is a temporary storage to store a datum. We can use it to store an expression.

The syntax is different from typed programming such as C++ and Java. Here are some important rules about declaring and using varaibles in Python and R:
1. You *do not have to perform variable declaration*
2. The variable *must be created before it can be used*
3. The *data type will be automatically determined* by the respective **interpreter** based on the value assigned
"""

#Python
s = 'Welcome to data science' #create variable s
print(s) #display value of variable s
print(type(s)) #display data type of variable s

# Commented out IPython magic to ensure Python compatibility.
# #R
# %%R
# s = 'Welcome to data science' #create variable s
# s  #display value of variable s

# Commented out IPython magic to ensure Python compatibility.
# #R
# %%R
# class(s) #display data type of variable s

"""#### **5. Dataframes**

Dataframes are matrices that containing rows and columns. Each column in a dataframe can be used to keep different type of values. When performing data analysis, we normally need to convert our data into dataframes.

Creating a dataframe in R is straightforward and easier than in Python. In R, we can create dataframe using `data.frame` syntax, but in Python, we need to load `pandas` and/or `numpy` package to create it.

"""

# Commented out IPython magic to ensure Python compatibility.
# #create a dataframe that contains author, year, publisher, and price of the book.
# #This dataframe contains 4 records.
# 
# %%R
# df_r = data.frame(author = c("Mitchell", "Turing", "James", "Cox"),
#                    year = c(1980, 1979, 1999, 2006),
#                    publisher = c("Wiley", "Chapman", "Sage", "CUP"),
#                    price = c(199.99, 205.99, 99.50, 100.50))
# 
# df_r

import pandas as pd
books = {"author": ["Mitchell2", "Turing2", "James2", "Cox2"],
          "year": [1980, 1979, 1999, 2006],
          "publisher": ["Wiley", "Chapman", "Sage", "CUP"],
          "price": [199.99, 205.99, 99.50, 100.50]
         }
df_py = pd.DataFrame(books)
df_py

"""#### **6. Import data from R to Python and vice-versa**

Consider working on a project which uses both python as well as R language, we may need to move data from one language to another.
"""

# Commented out IPython magic to ensure Python compatibility.
# #R to Python
# %%R -o df_r

df_r

# Commented out IPython magic to ensure Python compatibility.
# #Python to R
# %%R -i df_py

# Commented out IPython magic to ensure Python compatibility.
# %R df_py

"""#### **7. Install packages and libraries**

Running R and python in Colab allows one to use all packages provided by R in Python by importing the libraries right inside the notebook. This makes the data science work much more efficient.

"""

# Commented out IPython magic to ensure Python compatibility.
# #import R libraries
# %%R
# library(dplyr)
# library(ggplot2)

#import python libraries
import numpy as np
import seaborn as sns

"""#### **8. Getting help**"""

#Python
help(len)

# Commented out IPython magic to ensure Python compatibility.
#R
# %R ?exp

"""#### **8. Create functions**
A function is a block of codes that is used to perform a task. Sometimes, we may need to custom a function for specific tasks in data science.

*Python*

Python define a function using the following template:

```
def <function_name>(<parameters>):
  <documentation_string>
  return <expression>
```
"""

#Python
def square(num):
    "Returns the square of a number"
    result = num**2
    return result

"""Now that we have defined our function `square`, we can make use of the function to square some numbers"""

x = square(2)
print(x)

"""*R*

R define a function using the following template

```
<function_name> <- function(<parameters>){
  <function body>
}
```
"""

# Commented out IPython magic to ensure Python compatibility.
# #R
# %%R
# sum2num <- function(x, y) {
#     x + y
# }
# print(sum2num(2,3))